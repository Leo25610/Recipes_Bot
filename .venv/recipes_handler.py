from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery
from random import choices
from googletrans import Translator

import aiohttp
import asyncio

router = Router()
translator=Translator()

class CategorySearchStates(StatesGroup):
    waiting_for_recipe_count = State()
    waiting_for_category_choice = State()

@router.message(F.text.startswith("/category_search_random"))
async def handle_category_random_command(message: Message, state: FSMContext):
    parts = message.text.split(maxsplit=1)
    if len(parts) == 2 and parts[1].isdigit():
        count = int(parts[1])
        await state.set_data({"recipe_count": count})
        await ask_for_category(message, count)
        await state.set_state(CategorySearchStates.waiting_for_category_choice)
    else:
        await message.answer("–°–∫–æ–ª—å–∫–æ —Ä–µ—Ü–µ–ø—Ç–æ–≤ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–ª—É—á–∏—Ç—å? –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:")
        await state.set_state(CategorySearchStates.waiting_for_recipe_count)

@router.message(CategorySearchStates.waiting_for_recipe_count, F.text.regexp(r"^\d+$"))
async def handle_recipe_count_input(message: Message, state: FSMContext):
    count = int(message.text)
    await state.update_data(recipe_count=count)
    await ask_for_category(message, count)
    await state.set_state(CategorySearchStates.waiting_for_category_choice)

# –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ —á–∏—Å–ª–æ
@router.message(CategorySearchStates.waiting_for_recipe_count)
async def handle_invalid_count(message: Message):
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.")

async def ask_for_category(message: Message, count: int):
    url = "https://www.themealdb.com/api/json/v1/1/list.php?c=list"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            categories = [c["strCategory"] for c in data["meals"]]

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=cat, callback_data=f"cat_{cat}")]
            for cat in categories
        ]
    )

    await message.answer(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ {count} —Ä–µ—Ü–µ–ø—Ç(–∞/–æ–≤).\n–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
        reply_markup=keyboard
    )
@router.callback_query(F.data.startswith("cat_"))
async def handle_category_choice(callback: CallbackQuery, state: FSMContext):
    category = callback.data.removeprefix("cat_")

    user_data = await state.get_data()
    count = user_data.get("recipe_count", 1)

    url = f"https://www.themealdb.com/api/json/v1/1/filter.php?c={category}"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as response:
            data = await response.json()
            meals = data.get("meals", [])

    if not meals:
        await callback.message.answer("‚ùå –†–µ—Ü–µ–ø—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
        return

    count = min(count, len(meals))
    selected_meals = choices(meals, k=count)

    ids = [meal["idMeal"] for meal in selected_meals]
    await state.update_data({"selected_meals_ids": ids})

    translated_names = []
    for meal in selected_meals:
        name_en = meal.get("strMeal")
        translation = translator.translate(name_en, src="en", dest="ru")
        name_ru = translation.text
        translated_names.append(f"‚Ä¢ {name_ru}")

    result_text = "–ö–∞–∫ –í–∞–º —Ç–∞–∫–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(translated_names)

    show_button = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–∫–∞–∂–∏ —Ä–µ—Ü–µ–ø—Ç—ã", callback_data="show_selected_recipes")]
        ]
    )

    selected_ids = [meal["idMeal"] for meal in selected_meals]
    await state.update_data(meal_ids=selected_ids)
    await callback.message.answer(result_text, reply_markup=show_button)
    await callback.answer()

@router.callback_query(F.data == "show_selected_recipes")
async def handle_show_selected_recipes(callback: CallbackQuery, state: FSMContext):
    user_data = await state.get_data()
    ids = user_data.get("meal_ids", [])

    if not ids:
        await callback.message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ä–µ—Ü–µ–ø—Ç—ã.")
        return

    async def fetch_meal(meal_id: str):
        url = f"https://www.themealdb.com/api/json/v1/1/lookup.php?i={meal_id}"
        async with aiohttp.ClientSession() as session:
            async with session.get(url) as response:
                data = await response.json()
                return data["meals"][0] if data["meals"] else None

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–µ—Ü–µ–ø—Ç—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
    meals = await asyncio.gather(*[fetch_meal(meal_id) for meal_id in ids])

    for meal in meals:
        if meal is None:
            continue

        # –ù–∞–∑–≤–∞–Ω–∏–µ
        name_en = meal.get("strMeal", "")
        name_ru = translator.translate(name_en, src="en", dest="ru").text

        # –†–µ—Ü–µ–ø—Ç
        instructions_en = meal.get("strInstructions", "")
        instructions_ru = translator.translate(instructions_en, src="en", dest="ru").text

        # –ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã
        ingredients = []
        for i in range(1, 21):
            ingredient = meal.get(f"strIngredient{i}")
            measure = meal.get(f"strMeasure{i}")
            if ingredient and ingredient.strip():
                full = f"{measure.strip()} {ingredient.strip()}" if measure else ingredient.strip()
                ingredients.append(full)

        # –ü–µ—Ä–µ–≤–æ–¥–∏–º –≤—Å–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–æ–º
        ingredients_ru = [
            translator.translate(item, src="en", dest="ru").text for item in ingredients
        ]

        ingredients_text = ", ".join(ingredients_ru)

        # –§–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        final_text = (
            f"üçΩÔ∏è <b>{name_ru}</b>\n\n"
            f"<b>–†–µ—Ü–µ–ø—Ç:</b>\n{instructions_ru}\n\n"
            f"<b>–ò–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã:</b> {ingredients_text}"
        )

        await callback.message.answer(final_text, parse_mode="HTML")

    await state.clear()
    await callback.answer()

